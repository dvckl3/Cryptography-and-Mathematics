#!/usr/bin/env sage
from sage.all import *
from Crypto.Util.number import *
n=Integer(96685821958083526684938680238271304286887980859392922334047044570819254535637534763165507014186569373580269436562287115575895071477094697751185058766474544708343165263644182297048851208627306861544906558700694910255483830223450427540731613986917757415247541102253686241820221043700623282515147528145504812161)
ct1=Integer(31415617614942980419493801728329478459882170524654275330189702271291172239569974917796230082992620119324013322311500280165046115132115888952730272833129650105740565501270236988682510607126061981801996717672566496111413558704046446132351270004211376270714769910968931266620926532143617027921568831958784579911)
e=3
prefix= b"UMDCTF{"           
suffix= b"}"              
mid_len= 28 - len(prefix) - len(suffix)  
pad_len= 120 - 28             
m0_bytes = prefix \
         + b"\x00" * mid_len \
         + suffix \
         + (b"OAEP" * (pad_len // 4))
m0 = bytes_to_long(m0_bytes)
print(m0_bytes)
PR = PolynomialRing(Zmod(n), 'x')
x  = PR.gen()
A = Integer(256) ** pad_len
f = (m0 + x * A) ** e - ct1
f = f.monic()
roots = f.small_roots(epsilon=1/20)
if not roots:
    print("not yet")
else:
    x_val = int(roots[0])
    middle = long_to_bytes(x_val, mid_len)
    flag = prefix + middle + suffix
    print("flag:", flag.decode())
