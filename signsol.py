from sage.all import *
from pwn import remote

from Crypto.Util.number import long_to_bytes, bytes_to_long

import hashlib

difficulty = 6
zeros = '0' * difficulty

def is_valid(digest):
    return digest[:3] == b'\x00'*3

io = remote('35.187.238.100', 5003)
io.recvuntil(b'sha256("')
prefix = io.recvuntil(b'"')[:-1].decode()

i = 0
while True:
    i += 1
    s = prefix + str(i)
    if is_valid(hashlib.sha256(s.encode()).digest()):
        io.sendline(str(i).encode())
        break

sigs = []
for _ in range(30):
    io.sendline(b'1')
    sigs.append(int(io.recvline_contains(b'sig = ').split()[-1], 16))

io.sendline(b'2')
flag = int(io.recvline_contains(b'sig = ').split()[-1], 16)


pad = bytes_to_long(b'\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00010\r\x06\t`\x86H\x01e\x03\x04\x02\x01\x05\x00\x04 ' + b'\x00' * 32)
sigs = [x**11 - pad for x in sigs]
M = diagonal_matrix(ZZ, [sigs[0]] * len(sigs), sparse = False)
M[0] = [1<<256] + sigs[1:]


M = M.LLL()
for row in M:
    k0 = row[0] // (1<<256)
    n = sigs[0] // k0
    flag = pow(flag, 11, n)
    print(long_to_bytes(int(flag)))
    break
